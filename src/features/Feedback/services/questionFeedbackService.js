// Servicio especializado para generar retroalimentaci√≥n autom√°tica de preguntas
import saraApiService from './saraApiService.js';

/**
 * Genera retroalimentaci√≥n autom√°tica para una pregunta espec√≠fica
 * @param {Object} questionData - Datos de la pregunta
 * @param {string} questionData.pregunta - La pregunta
 * @param {string} questionData.respuestaEstudiante - Respuesta del estudiante
 * @param {string} questionData.respuestaCorrecta - Respuesta correcta
 * @param {boolean} questionData.esCorrecta - Si la respuesta es correcta
 * @param {string} questionData.tipo - Tipo de pregunta (multiple_choice, text, etc.)
 * @param {string} studentName - Nombre del estudiante
 * @param {string} activityName - Nombre de la actividad
 * @returns {Promise<string>} Retroalimentaci√≥n generada por IA
 */
export const generateQuestionFeedback = async (questionData, studentName = "", activityName = "") => {
  try {
    console.log("ü§ñ Generando retroalimentaci√≥n autom√°tica para pregunta:", questionData.pregunta);

    // Construir el prompt contextualizado
    const prompt = buildFeedbackPrompt(questionData, studentName, activityName);

    // Llamar a la API de SARA
    const response = await saraApiService.askSara({
      query: prompt,
      context: "question_feedback",
      history: []
    });

    if (response && response.response) {
      const feedback = response.response.trim();
      console.log("‚úÖ Retroalimentaci√≥n generada:", feedback);
      return feedback;
    } else {
      console.warn("‚ö†Ô∏è Respuesta vac√≠a de SARA, usando retroalimentaci√≥n por defecto");
      return generateDefaultFeedback(questionData);
    }

  } catch (error) {
    console.error("‚ùå Error generando retroalimentaci√≥n con SARA:", error);
    console.log("üîÑ Usando retroalimentaci√≥n por defecto como fallback");
    return generateDefaultFeedback(questionData);
  }
};

/**
 * Construye el prompt contextualizado para la IA
 */
const buildFeedbackPrompt = (questionData, studentName, activityName) => {
  const { pregunta, respuestaEstudiante, respuestaCorrecta, esCorrecta, tipo } = questionData;
  
  let prompt = `Como tutor de ingl√©s del SENA, proporciona retroalimentaci√≥n espec√≠fica y constructiva para esta pregunta:

CONTEXTO:
- Estudiante: ${studentName || "Estudiante"}
- Actividad: ${activityName || "Actividad de ingl√©s"}
- Tipo de pregunta: ${tipo || "general"}

PREGUNTA: ${pregunta}

RESPUESTA DEL ESTUDIANTE: ${respuestaEstudiante}
RESPUESTA CORRECTA: ${respuestaCorrecta}
RESULTADO: ${esCorrecta ? "CORRECTA" : "INCORRECTA"}

INSTRUCCIONES:
1. Proporciona retroalimentaci√≥n en espa√±ol, m√°ximo 2-3 oraciones
2. Si es correcta: felicita y refuerza el concepto aprendido
3. Si es incorrecta: explica el error de manera constructiva y da una pista para mejorar
4. Mant√©n un tono motivador y educativo
5. Enf√≥cate en el aprendizaje del ingl√©s y conceptos gramaticales relevantes

RETROALIMENTACI√ìN:`;

  return prompt;
};

/**
 * Genera retroalimentaci√≥n por defecto cuando la IA no est√° disponible
 */
const generateDefaultFeedback = (questionData) => {
  const { esCorrecta, tipo } = questionData;
  
  if (esCorrecta) {
    const correctFeedbacks = [
      "¬°Excelente! Has demostrado una buena comprensi√≥n del concepto. Contin√∫a practicando.",
      "¬°Muy bien! Tu respuesta es correcta. Sigue as√≠ para fortalecer tu aprendizaje.",
      "¬°Correcto! Has aplicado bien los conocimientos. Contin√∫a con esta dedicaci√≥n.",
      "¬°Perfecto! Demuestras dominio del tema. Sigue practicando para mantener este nivel."
    ];
    return correctFeedbacks[Math.floor(Math.random() * correctFeedbacks.length)];
  } else {
    const incorrectFeedbacks = [
      "No te preocupes, los errores son parte del aprendizaje. Revisa el concepto y vuelve a intentarlo.",
      "Casi lo tienes. Revisa la explicaci√≥n y practica un poco m√°s este tema.",
      "Buen intento. Te recomiendo repasar este concepto para mejorar tu comprensi√≥n.",
      "No es la respuesta correcta, pero est√°s en el camino correcto. Sigue practicando."
    ];
    return incorrectFeedbacks[Math.floor(Math.random() * incorrectFeedbacks.length)];
  }
};

/**
 * Genera retroalimentaci√≥n para m√∫ltiples preguntas de una actividad
 * @param {Array} questions - Array de preguntas
 * @param {string} studentName - Nombre del estudiante
 * @param {string} activityName - Nombre de la actividad
 * @returns {Promise<Array>} Array de preguntas con retroalimentaci√≥n generada
 */
export const generateActivityFeedback = async (questions, studentName = "", activityName = "") => {
  console.log(`üîÑ Generando retroalimentaci√≥n para ${questions.length} preguntas de la actividad: ${activityName}`);
  
  const questionsWithFeedback = [];
  
  for (let i = 0; i < questions.length; i++) {
    const question = questions[i];
    console.log(`üìù Procesando pregunta ${i + 1}/${questions.length}`);
    
    try {
      // Generar retroalimentaci√≥n para cada pregunta
      const feedback = await generateQuestionFeedback(question, studentName, activityName);
      
      questionsWithFeedback.push({
        ...question,
        retroalimentacion: feedback
      });
      
      // Peque√±a pausa para no sobrecargar la API
      if (i < questions.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
    } catch (error) {
      console.error(`‚ùå Error procesando pregunta ${i + 1}:`, error);
      // Usar retroalimentaci√≥n por defecto en caso de error
      questionsWithFeedback.push({
        ...question,
        retroalimentacion: generateDefaultFeedback(question)
      });
    }
  }
  
  console.log("‚úÖ Retroalimentaci√≥n generada para todas las preguntas");
  return questionsWithFeedback;
};

/**
 * Verifica si una pregunta necesita generar retroalimentaci√≥n
 * @param {Object} question - Datos de la pregunta
 * @returns {boolean} True si necesita generar retroalimentaci√≥n
 */
export const needsFeedbackGeneration = (question) => {
  return !question.retroalimentacion || 
         question.retroalimentacion.trim() === "" ||
         question.retroalimentacion === "Retroalimentaci√≥n pendiente";
};

export default {
  generateQuestionFeedback,
  generateActivityFeedback,
  needsFeedbackGeneration
};